package com.ust.project.controller;

import java.util.List;
import java.util.Optional;

import javax.validation.Valid;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.ust.project.dto.MovieDto;
import com.ust.project.entity.Movie;
import com.ust.project.exception.MovieNotFoundException;
import com.ust.project.repository.MovieRepository;
import com.ust.project.service.MovieService;

@RestController
@RequestMapping("/1.0/admin")
public class MovieController {
	
	@Autowired
	MovieService movieService;
	
	

//	@PostMapping("/addAMovie")
//	public ResponseEntity<Movie> addAMovie(@RequestBody @Valid MovieDto dto) {
//		return ResponseEntity.ok(movierepo.save(dto));
//		return ResponseEntity.ok(movieService.add(dto));
//	}
	
//	 @PostMapping
//	    public ResponseEntity<String> addMovie(@RequestParam("movieName") String name,
//	    										@RequestParam("movieDirector") String director,
//	                                           @RequestParam("movieGenre") String genre,
//	                                           @RequestParam("movieReleaseDate") String releasedate,
//	                                           @RequestParam("movieLanguage") String language,
//	                                           @RequestParam("duration") String duration,
//	                                           @RequestParam("country") String country,
//	                                           @RequestParam("imageFile") MultipartFile imageFile) {
//	        try {
//	            movieService.addMovie(name,director,genre,releasedate,language, duration,country,imageFile);
//	            return ResponseEntity.ok("Movie added successfully");
//	        } catch (Exception e) {
//	            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to add movie");
//	        }
//	    }
	
	@PostMapping("/addMovie")
	public ResponseEntity<String> addMovie(@RequestParam("movieName") 
	                                       @NotBlank(message = "Movie name is required") String name,
	                                       @RequestParam("movieDirector") 
	                                       @NotBlank(message = "Movie director is required") String director,
	                                       @RequestParam("movieGenre") 
	                                       @NotBlank(message = "Movie genre is required") String genre,
	                                       @RequestParam("movieReleaseDate") 
	                                       @Pattern(regexp = "\\d{4}-\\d{2}-\\d{2}",
	                                                message = "Invalid release date format. Expected format: yyyy-MM-dd") 
	                                       String releaseDate,
	                                       @RequestParam("movieLanguage") 
	                                       @NotNull(message = "Movie language is required") String language,
	                                       @RequestParam("duration") 
	                                       @NotBlank(message = "Movie duration is required") String duration,
	                                       @RequestParam("country") 
	                                       @NotBlank(message = "Movie country is required") String country,
	                                       
	@RequestParam("overallRate") 
    @NotBlank(message = "Overall Rate is required") double overallrate,
    @RequestParam("imageFile")
	                                       @NotNull(message = "Image file is required") MultipartFile imageFile) {
	    try {
	        movieService.addMovie(name, director, genre, releaseDate, language, duration, country,overallrate, imageFile);
	        return ResponseEntity.ok("Movie added successfully");
	    } catch (Exception e) {
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to add movie");
	    }
	}


	@GetMapping("/viewAllMovies")
	public List<Movie> viewAllMovies() {
		return movieService.view();
	}

	@GetMapping("/get/{movieId}")
	public ResponseEntity<Movie> getById(@PathVariable long movieId) throws MovieNotFoundException{
		return ResponseEntity.ok(movieService.fetchById(movieId));
	}

	@PutMapping("/updateAMovie/{movieId}")
	public ResponseEntity<Movie> updateMovie(@RequestBody MovieDto dto,@PathVariable @Valid long movieId ) throws MovieNotFoundException {
		return ResponseEntity.ok(movieService.update(dto,movieId));
	}
		

	@DeleteMapping("/deleteAMovie/{movieId}")
	public String deleteMovie(@PathVariable long movieId) throws MovieNotFoundException {
		
	return	movieService.delete(movieId);
		
	}
	}


