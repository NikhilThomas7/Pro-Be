package com.ust.project.service;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.ust.project.dto.MovieDto;
import com.ust.project.entity.Movie;
import com.ust.project.exception.MovieNotFoundException;
import com.ust.project.repository.MovieRepository;

import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.PutObjectRequest;

@Service
public class MovieService {
	
	@Autowired
	MovieRepository movierepo;
	

	@Value("${s3.bucket.name}")
	private String bucketName;
 
    @Value("${aws.s3.folder}")
    private String folderName;

//	public Movie add(MovieDto dto) {
////		Movie movie=Movie.build(0,dto.getMovieName(),dto.getMovieDirector(),
////				dto.getMovieGenre(),dto.getMovieReleaseDate(),dto.getMovieLanguage(),
////				dto.getDuration(),dto.getCountry(),dto.getOverallRate());
//		Movie movie=new Movie();
//		movie.setMovieName(dto.getMovieName());
//		movie.setMovieDirector(dto.getMovieDirector());
//		movie.setMovieGenre(dto.getMovieGenre());
//		movie.setMovieReleaseDate(dto.getMovieReleaseDate());
//		movie.setMovieLanguage(dto.getMovieLanguage());
//		movie.setDuration(dto.getDuration());
//		movie.setCountry(dto.getCountry());
//		movie.setOverallRate(dto.getOverallRate());
//		return movierepo.save(movie);
//	}
    
    private String generateS3ImageUrl(String imageFileName) {
        return "https://s3.amazonaws.com/" + bucketName + "/" + folderName + "/" + imageFileName;
    }
	
	private String generateUniqueFileName(String originalFilename) {
        // Generate a unique filename for the image using a UUID
        String uniqueFilename = UUID.randomUUID().toString();

        // Extract the file extension from the original filename, if present
        String fileExtension = "";
        int extensionIndex = originalFilename.lastIndexOf('.');
        if (extensionIndex >= 0 && extensionIndex < originalFilename.length() - 1) {
            fileExtension = originalFilename.substring(extensionIndex + 1);
        }

        // Append the file extension to the unique filename, if available
        if (!fileExtension.isEmpty()) {
            uniqueFilename += "." + fileExtension;
        }

        return uniqueFilename;
    }
	
	private void uploadImageToS3(MultipartFile imageFile, String imageFileName) {
        try {
            S3Client s3Client = S3Client.builder()
                    .region(Region.US_EAST_1)
                    .credentialsProvider(() -> AwsBasicCredentials.create("AKIA4GO4DIU3IIQIFZ6S", "hXf6EkqVQBR+BZ0oOQMSMrhnrpapjdhfSABIzL/N"))
                    .build();

            PutObjectRequest putObjectRequest = PutObjectRequest.builder()
                    .bucket(bucketName)
                    .key(folderName + "/" + imageFileName)
                    .build();

            s3Client.putObject(putObjectRequest, RequestBody.fromBytes(imageFile.getBytes()));
        } catch (Exception e) {
            System.out.println("Exception occurred during S3 upload: " + e.getMessage());
        }
    }
	
	
	public void addMovie(String name,String director,String genre,String releasedate,String language,String duration, String country, MultipartFile imageFile) {
        // Upload image file to AWS S3
        String imageFileName = generateUniqueFileName(imageFile.getOriginalFilename());
        uploadImageToS3(imageFile, imageFileName);

        // Create Movie object and save it in the database
        Movie movie = new Movie(name,director,genre,releasedate,language, duration,country, generateS3ImageUrl(imageFileName));
        movierepo.save(movie);
    }

	public List<Movie> view() {
		// TODO Auto-generated method stub
		return movierepo.findAll();
	}

	public Movie fetchById(long movieId) throws MovieNotFoundException {
		Optional<Movie> op=movierepo.findById(movieId);
		if(op.isPresent()) {
			return op.get();
			}
		throw new MovieNotFoundException("movie not found with id : "+ movieId);
		
	}

	public Movie update(MovieDto dto,long movieId) throws MovieNotFoundException {
		Optional<Movie> op = movierepo.findById(movieId);
		Movie temp = null;
		if (op.isPresent()) {
			temp = op.get();
			temp.setMovieName(dto.getMovieName());
			temp.setMovieGenre(dto.getMovieGenre());
			temp.setMovieReleaseDate(dto.getMovieReleaseDate());
			temp.setMovieLanguage(dto.getMovieLanguage());
			temp.setDuration(dto.getDuration());
			temp.setCountry(dto.getCountry());
			temp.setOverallRate(dto.getOverallRate());
			return temp;
		}
		else
				throw new MovieNotFoundException("movie not found with id : "+ movieId);
		
	}

	public String delete(long movieId) throws MovieNotFoundException {
		Optional<Movie> opt= movierepo.findById(movieId);
		if(opt.isPresent()) {
			movierepo.deleteById(movieId);
			return "Movie Deleted Successfully";
			
		}
		else {
			throw new MovieNotFoundException("movie not found with id : "+ movieId);
		}
	}
	

}
